name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-run:
    name: build-and-run
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source code from repository
      uses: actions/checkout@v4
    
    - name: Build Docker images for all microservices
      run: docker compose build
    
    - name: Create environment variables file
      run: |
        echo "MONGODB_AUTH_URI=mongodb://mongodb:27017/auth_service" > .env.test
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.test
        echo "MONGODB_PRODUCT_URI=mongodb://mongodb:27017/product_service" >> .env.test
        echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> .env.test
        echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> .env.test
    
    - name: Start all Docker containers
      run: docker compose up -d
    
    - name: Wait for services startup and configure MongoDB
      run: |
        echo "Waiting for services to be ready..."
        sleep 40
        docker compose ps
    
    - name: Create test user in auth service
      run: |
        echo "Creating test user..."
        sleep 5
        docker exec auth-service node -e "
        const mongoose = require('mongoose');
        const bcrypt = require('bcryptjs');
        
        (async () => {
          try {
            await mongoose.connect('mongodb://mongodb:27017/auth_service');
            console.log('Connected to MongoDB');
            
            const UserSchema = new mongoose.Schema({
              username: { type: String, required: true, unique: true },
              password: { type: String, required: true },
              email: String
            });
            
            const User = mongoose.model('User', UserSchema);
            
            // Xóa user cũ nếu tồn tại
            await User.deleteOne({ username: 'testuser' });
            console.log('Cleaned up old test user if existed');
            
            // Tạo user mới
            const hashedPassword = await bcrypt.hash('123456', 10);
            const newUser = await User.create({
              username: 'testuser',
              password: hashedPassword,
              email: 'test@test.com'
            });
            console.log('Test user created successfully with ID:', newUser._id);
            
            // Verify user exists
            const verifyUser = await User.findOne({ username: 'testuser' });
            console.log('Verification - User exists:', !!verifyUser);
            
            await mongoose.disconnect();
            process.exit(0);
          } catch (error) {
            console.error('Error:', error);
            process.exit(1);
          }
        })();
        "
    
    - name: Verify test user can login
      run: |
        echo "Testing login endpoint..."
        docker exec auth-service node -e "
        const http = require('http');
        
        const data = JSON.stringify({
          username: 'testuser',
          password: '123456'
        });
        
        const options = {
          hostname: 'localhost',
          port: 3000,
          path: '/login',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Content-Length': data.length
          }
        };
        
        const req = http.request(options, (res) => {
          let responseData = '';
          
          res.on('data', (chunk) => {
            responseData += chunk;
          });
          
          res.on('end', () => {
            console.log('Login response status:', res.statusCode);
            console.log('Login response body:', responseData);
            
            if (res.statusCode === 200) {
              const body = JSON.parse(responseData);
              if (body.token) {
                console.log('✓ Login successful, token received');
                process.exit(0);
              } else {
                console.error('✗ No token in response');
                process.exit(1);
              }
            } else {
              console.error('✗ Login failed with status:', res.statusCode);
              process.exit(1);
            }
          });
        });
        
        req.on('error', (error) => {
          console.error('Error:', error);
          process.exit(1);
        });
        
        req.write(data);
        req.end();
        "
    
    - name: Run unit tests (auth)
      run: |
        echo "Running auth service tests..."
        docker exec -e MONGODB_AUTH_URI=mongodb://mongodb:27017/auth_service auth-service npm test
    
    - name: Run unit tests (product)
      run: |
        echo "Running product service tests..."
        docker exec -e AUTH_SERVICE_URL=http://auth-service:3000 -e PRODUCT_SERVICE_URL=http://product-service:3001 product-service npm test

    - name: Stop and remove containers after testing
      run: docker compose down -v

  deploys:
    name: deploys
    needs: build-and-run
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source code from repository
      uses: actions/checkout@v4
    
    - name: Rebuild Docker images for deployment
      run: docker compose build
    
    - name: Login to Docker Hub registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Tag and push images to Docker Hub
      run: |
        docker tag 22653721-nguyenhoangkhanhduy-eproject-auth:latest ${{ secrets.DOCKER_USERNAME }}/eproject-auth:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-auth:latest
        docker tag 22653721-nguyenhoangkhanhduy-eproject-product:latest ${{ secrets.DOCKER_USERNAME }}/eproject-product:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-product:latest
        docker tag 22653721-nguyenhoangkhanhduy-eproject-order:latest ${{ secrets.DOCKER_USERNAME }}/eproject-order:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-order:latest
        docker tag 22653721-nguyenhoangkhanhduy-eproject-api-gateway:latest ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:latest
    

