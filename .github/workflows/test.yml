name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Create .env files
      run: |
        echo "MONGODB_AUTH_URI=mongodb://localhost:27017/auth_service" >> auth/.env
        echo "JWT_SECRET=test_secret_key_12345" >> auth/.env
        echo "JWT_SECRET=test_secret_key_12345" >> product/.env
        echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/product_service" >> product/.env
        echo "LOGIN_TEST_USER=testuser" >> product/.env
        echo "LOGIN_TEST_PASSWORD=testpass123" >> product/.env
    
    - name: Install dependencies
      run: |
        npm ci
        cd auth && npm ci
        cd ../product && npm ci
    
    - name: Run Auth Service tests
      run: |
        cd auth
        npm test
    
    - name: Start Auth Service for Product tests
      run: |
        cd auth
        npm start &
        echo "Waiting for Auth Service to start..."
        sleep 10
        
    - name: Register test user for Product tests
      run: |
        curl -X POST http://localhost:3000/register \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","password":"testpass123"}' || true
    
    - name: Run Product Service tests
      run: |
        cd product
        npm test

  build:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Auth Service
      uses: docker/build-push-action@v5
      with:
        context: ./auth
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/eproject-auth:latest
          ${{ secrets.DOCKER_USERNAME }}/eproject-auth:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-auth:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-auth:buildcache,mode=max
    
    - name: Build and push Product Service
      uses: docker/build-push-action@v5
      with:
        context: ./product
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/eproject-product:latest
          ${{ secrets.DOCKER_USERNAME }}/eproject-product:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-product:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-product:buildcache,mode=max
    
    - name: Build and push Order Service
      uses: docker/build-push-action@v5
      with:
        context: ./order
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/eproject-order:latest
          ${{ secrets.DOCKER_USERNAME }}/eproject-order:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-order:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-order:buildcache,mode=max
    
    - name: Build and push API Gateway
      uses: docker/build-push-action@v5
      with:
        context: ./api-gateway
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:latest
          ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:buildcache,mode=max

  deploy:
    name: Deploy with Docker Compose
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp docker-compose.yml deploy/
        tar -czf deploy.tar.gz deploy/
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deploy.tar.gz
        retention-days: 30
